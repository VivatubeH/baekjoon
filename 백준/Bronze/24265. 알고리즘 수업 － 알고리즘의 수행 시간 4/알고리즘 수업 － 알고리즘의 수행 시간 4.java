import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 이번 의사 코드에는 함정이 있습니다.

        // 시간복잡도는 O(n^2)으로 같습니다.
        // 이는 i는 결국 상수, j도 i에 따라 결정되는 상수이기 때문에
        // O(n^2)이 n x n = n^2이 되므로 최고차항의 차수는 2입니다.

        // 그러나, 여기서 수행 횟수를 구할 때는 i의 값에 따라
        // j의 값이 종속되는 관계를 갖습니다.
        // 그리고 i의 값이 커질수록 j에서는 1개씩 사용할 수 없게 되므로
        // 수행횟수는 n에 대해서
        // 수행횟수 = n-1 + n-2 + n-3 + ... + 1 이라는 수식이 나오는데
        // 이는 결국 1부터 n-1까지의 합을 구하는 것과 같습니다.

        // 1부터 n까지의 합은 n(n+1)/2로 구할 수 있고
        // 1부터 n-1까지의 합은 n(n-1)/2로 구할 수 있습니다.
        // 어차피 n이나 n-1 중에 하나는 반드시 짝수이기 때문에
        // 실수는 생각할 필요 없이 수행횟수를 바로 구하면 됩니다.
        Scanner in = new Scanner(System.in);
        // 50만 x 50만을 대비해서 long으로 받습니다
        // 어차피 자바는 더 큰 타입으로 묵시적 형변환이 되기 때문에 long으로 받는 것이 효율적입니다.
        long n = in.nextInt();

        // 수행 횟수를 다항식으로 나타내면
        // n^2-n / 2이고 최고차항의 차수는 2입니다.
        // 마찬가지로 50만 x 50만에 대한 대비로 long으로 변환합니다.
        System.out.println((n*(n-1) / 2));
        System.out.println(2);
    }
}